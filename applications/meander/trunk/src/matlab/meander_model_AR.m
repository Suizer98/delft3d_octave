
function [output] = meander_model_AR(s,iR,AR,q,h,W,Cfe,zb,asR,dt,modtyp,FasRb,amplitude,strongcurvature,Ashld,Bshld,approxlev)
% Meander model based on
%
% 1) Model for the spatial development of alpha_s/R
% 2) Parametrisation from 1DV model (<fsfn>,<Cf>).
% 3) Model for the spatial development of A/R
% 4) Bank erosion formulation based on B/2*alpha_s/R*U.
%
% Coded: Willem Ottevanger, 6 October 2012
%
% -------------------------------------------

if nargin < 17, approxlev = 100; end
fp3_idx    = [0:2:max(min(20,approxlev),0)]/2+1;        
fp3_a_all  = [.2500000000,-.1250000000,+0.7812500000e-1,-0.5468750000e-1,+0.4101562500e-1,-0.3222656250e-1,...
              +0.2618408203e-1,-0.2182006836e-1,+0.1854705811e-1,-0.1601791382e-1,+0.1401567459e-1];
fp3_b_all  = [0:2:20];
fp3_a_apr  = fp3_a_all(fp3_idx);
fp3_b_apr  = fp3_b_all(fp3_idx);

fp1_a_all = [                   1. ...
                                0.7500000000 ...
                                0.6250000000 ...
                                0.5468750000 ...
                                0.4921875000 ...
                                0.4511718750 ...
                                0.4189453125 ...
                                0.3927612305 ...
                                0.3709411621 ...
                                0.3523941040 ...
                                0.3363761902 ...
                                0.3223605156 ...
                                0.3099620342 ...
                                0.2988919616 ...
                                0.2889288962 ...
                                0.2798998682 ...
                                0.2716675191 ...
                                0.2641211991 ...
                                0.2571706413 ...
                                0.2507413752 ...
                                0.2447713425 ...
                                0.2392083574 ...
                                0.2340081758 ...
                                0.2291330054 ...
                                0.2245503453 ...
                                0.2202320694 ...
                                0.2161536978 ...
                                0.2122938103 ...
                                0.2086335722 ...
                                0.2051563460 ...
                                0.2018473727 ...
                                0.1986935075 ...
                                0.1956829998 ...
                                0.1928053086 ...
                                0.1900509471 ...
                                0.1874113506 ...
                                0.1848787648 ...
                                0.1824461494 ...
                                0.1801070962 ...
                                0.1778557575 ...
                                0.1756867849 ...
                                0.1735952756 ...
                                0.1715767258 ...
                                0.1696269903 ...
                                0.1677422460 ...
                                0.1659189607 ...
                                0.1641538654 ...
                                0.1624439293 ...
                                0.1607863382 ... 
                                0.1591784748 ...
                                0.1576179015];
fp1_b_all = [0:2:100];
fp1_idx    = [0:2:max(min(100,approxlev),0)]/2+1;        
fp1_a_apr  = fp1_a_all(fp1_idx);
fp1_b_apr  = fp1_b_all(fp1_idx);

fp2_a_all =  [                  0.09006327431 ...
                                0.04683290264 ...
                                0.03007010547 ...
                                0.02147631276 ...
                                0.01636346113 ...
                                0.01302330225 ...
                                0.01069575957 ...
                               0.008995255163 ...
                               0.007707030822 ...
                               0.006702764629 ...
                               0.005901456098 ...
                               0.005249668808 ...
                               0.004710847964 ...
                               0.004259215762 ...
                               0.003876118578 ...
                               0.003547754632 ...
                               0.003263712570 ...
                               0.003016004048 ...
                               0.002798406947 ...
                               0.002606009432 ...
                               0.002434887080 ...
                               0.002281870140 ...
                               0.002144373067 ...
                               0.002020267826 ...
                               0.001907788495 ...
                               0.001805458536 ...
                               0.001712034769 ...
                               0.001626463727 ...
                               0.001547847363 ...
                               0.001475415865 ...
                               0.001408505920 ...
                               0.001346543204 ...
                               0.001289028193 ...
                               0.001235524563 ...
                               0.001185649667 ...
                               0.001139066668 ...
                               0.001095477990 ...
                               0.001054619865 ...
                               0.001016257739 ...
                               0.0009801824062 ...
                               0.0009462067364 ...
                               0.0009141628858 ...
                               0.0008838999183 ...
                               0.0008552817656 ...
                               0.0008281854728 ...
                               0.0008024996837 ...
                               0.0007781233281 ...
                               0.0007549644825 ...
                               0.0007329393764 ...
                               0.0007119715241 ...
                               0.0006919909642];
fp2_b_all = [0:2:100];
fp2_idx    = [0:2:max(min(100,approxlev),0)]/2+1;        
fp2_a_apr  = fp2_a_all(fp2_idx);
fp2_b_apr  = fp2_b_all(fp2_idx);

fp2_a2_all = [                 -0.2500000000 ...
                               -0.1250000000 ...
                               -0.07812500000 ...
                               -0.05468750000 ...
                               -0.04101562500 ...
                               -0.03222656250 ...
                               -0.02618408203 ...
                               -0.02182006836 ...
                               -0.01854705811 ...
                               -0.01601791382 ...
                               -0.01401567459 ...
                               -0.01239848137 ...
                               -0.01107007265 ...
                               -0.009963065386 ...
                               -0.009029028006 ...
                               -0.008232349064 ...
                               -0.007546319976 ...
                               -0.006950557872 ...
                               -0.006429266032 ...
                               -0.005970032744 ...
                               -0.005562985057 ...
                               -0.005200181683 ...
                               -0.004875170328 ...
                               -0.004582660109 ...
                               -0.004318275872 ...
                               -0.004078371656 ...
                               -0.003859887461 ...
                               -0.003660238109 ...
                               -0.003477226204 ...
                               -0.003308973323 ...
                               -0.003153865198 ...
                               -0.003010507689 ...
                               -0.002877691174 ...
                               -0.002754361552 ...
                               -0.002639596487 ...
                               -0.002532585819 ...
                               -0.002432615326 ...
                               -0.002339053198 ...
                               -0.002251338703 ...
                               -0.002168972653 ...
                               -0.002091509344 ...
                               -0.002018549716 ...
                               -0.001949735521 ...
                               -0.001884744337 ...
                               -0.001823285282 ...
                               -0.001765095327 ...
                               -0.001709936098 ...
                               -0.001657591115 ...
                               -0.001607863382 ...
                               -0.001560573282];
fp2_b2_all = [1:2:100];
fp2_idx2    = ([1:2:max(min(100,approxlev),0)]-1)/2+1;        
fp2_a2_apr  = fp2_a2_all(fp2_idx2);
fp2_b2_apr  = fp2_b2_all(fp2_idx2);


%% User settings
[physpar] = getphyspar();
b         = physpar.b;       %non-linearity of sediment transport model
g         = physpar.g;       % Gravity
karman    = physpar.karman;  % von Karman constant
Sn        = physpar.Sn;      % Transverse slope
chi       = physpar.chi;     % ??
Eu        = physpar.Eu;
iS        = physpar.iS;      % Valley slope
%Cf0       = physpar.Cf0;
z0        = physpar.ks/30;
L         = physpar.L;
H0        = physpar.H0;
Q0        = physpar.Q0;      %Unit discharge
Fr        = Q0/H0/sqrt(g*H0);
thetcr    = physpar.thetcr;
thet0     = physpar.thet;
specden   = physpar.specden;
relden   = physpar.relden;
%Ashld     = physpar.Ashld;
%Bshld     = physpar.Bshld;
D50       = physpar.D50;
Gthet     = 1/Ashld/thet0.^(Bshld);
lamdas    = W.^2/pi^2./h./Gthet;
lamdas    = lamdas(:);

[numpar]  = getnumpar();
CFL       = numpar.asRCFL;
smoothrad = numpar.smoothrad;
streamcurv= numpar.streamcurv;
bedtype   = numpar.bedtype;
asRacc    = numpar.asRacc;
routyp    = numpar.routyp;
calfac    = numpar.calfac;
%ds        = numpar.ds;
rn        = numpar.rn;
maxK      = numpar.maxK;
sweacc    = numpar.sweacc;              % accuracy cutoff for SWE calculation
%amplitude       = numpar.amplitude;                 
%strongcurvature = numpar.strongcurvature; 
%% Initialisation

%Make vertical input.
q   = q(:);
h   = h(:);
W   = W(:);
Cfe = Cfe(:);
%zb  = zb(:);
asR = asR(:);
AR  = AR(:);
fP1_AR  = ones(size(AR));
fP1_asR = ones(size(AR));
fP2_AR  = zeros(size(AR));
fP2_asR = zeros(size(AR));
fP3     = 0.25*ones(size(AR));

        if (modtyp == 1)
            for kl = 1:length(AR);
              BpAR = amplitude*W(kl)/pi*AR(kl);
              BpasR = amplitude*W(kl)/pi*asR(kl);
              BRPi = strongcurvature*W(kl)/pi*iR(kl);
              BR   = strongcurvature*W(kl)*iR(kl);
              fP1_AR(kl)  = sum(fp1_a_apr.*BpAR.^fp1_b_apr);
              fP1_asR(kl) = sum(fp1_a_apr.*BpasR.^fp1_b_apr);
              fP2_AR(kl)  = sum(fp2_a_apr.*BpAR.^fp2_b_apr)*BR ...
                          + sum(fp2_a2_apr.*BpAR.^fp2_b2_apr);
              fP2_asR(kl) = sum(fp2_a_apr.*BpasR.^fp2_b_apr)*BR ...
                          + sum(fp2_a2_apr.*BpasR.^fp2_b2_apr);       
             % fP3(kl)     = sum(fp3_a_apr.*UnUs0.^fp3_b_apr);                      
            end
        end
        fP1_AR  = fP1_AR(:);
        fP1_asR = fP1_asR(:); 
        fP2_AR  = fP2_AR(:);
        fP2_asR = fP2_asR(:);         
        fP3     = fP3(:);    
while (dt > 0)
    s = s(:);
    iR = iR(:);
    sn = sign(iR);
    N  = length(s);
    iR0 = iR;
    s2 = s(end)+diff(s(end-1:end));%sqrt((y(end)-y(end-1))^2+(x(end)-x(end-1))^2);

    B1b = ones(N,1);            %Identity matrix diagonal
    ds  = diff([s;s2]);
    B2b = [0;1./ds(2:N)];       %First derivative matrix diagonal
    B2a = -B2b;                 %First derivative matrix offleft diagonal
    B2c = zeros(N,1);
    B4a = zeros(N,1);
    B4b = zeros(N,1);
    B4c = zeros(N,1);
    for k = 2:N-1;
       B4a(k)= 1./(0.5*(ds(k+1)+ds(k)))*1/ds(k);               %Second derivative matrix off-left diagonal
       B4b(k)=-1./(0.5*(ds(k+1)+ds(k)))*(1/ds(k)+1/ds(k+1));   %Second derivative matrix diagonal
       B4c(k)= 1./(0.5*(ds(k+1)+ds(k)))*1/ds(k+1);             %Second derivative matrix off-right diagonal
    end
    switch(smoothrad)
        case(1)
            difval = 0.0025;                 %                
            for t = 0:difval:0.0125;          %diffusion solver
                iR2 = matprodsol(B4a,B4b,B4c,iR);
                iR = (1-difval)*iR + difval*iR2;
            end
             tend = 0.0125;
             difval = min(0.25*min(ds).^2,tend)                 %                
             for t = difval:difval:tend;          %diffusion solver
                 iR2 = matprodsol(B4a,B4b,B4c,iR);
                 iR = (1-difval)*iR + difval*iR2;
                 difval = min(difval,tend-t);                 %                
             end
        case(2)
            l1  = 2*h;
            %L1   = 2*diag(h./ones(size(s))).*B2+B1;                       
            [iR] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,iR0);          %iR = (inv(L1)*iR0);
        otherwise
    end
    
    %Initial streamline curvature:
    iRs = iR;
    switch(bedtype)
        case(0)
            AR = 0*iR; %=flat bed;
        case(1)
            AR = 3*iR;  %=river bed.
        case(2)
            load sA_m89
            s_m89 = s_m89+3;
            s_m89(1)= s(1);
            s_m89(end)= s(end);
            AR = interp1(s_m89,A_m89,s,'cubic');
        case(3)
            %From input;
    end
    AR0   = AR;
    %Calculate first derivatives (d/ds)
    dsiR  = matprodsol(B2a,B2b,B2c,iR);
    dsiRs = matprodsol(B2a,B2b,B2c,iRs);
    dsAR  = matprodsol(B2a,B2b,B2c,AR);
    psias = ones(length(s),1);
    psitur = ones(length(s),1);
    psitot0 = ones(length(s),1);
    atau  = zeros(length(s),1);
    thet  = zeros(length(s),1);
    fsfnd = zeros(length(s),1);
    beta  = zeros(length(s),1);
    fnfnd = zeros(length(s),1);
    
    %% Linear & non-linear solution for curved channel flow.
    asRdiff = 1;
    k = 0;
    Cfg = ((log(h./z0) - (h-z0)./h)/karman).^(-2);  %grain friction;
    Cf3 = routyp*Cfg + (1-routyp)*Cfe;
    Cf2 = Cf3;

    while (asRdiff > asRacc && k < maxK);
        clc;
        disp([num2str(k),': ',num2str(asRdiff)])
        k = k+1;
        for j = 1:length(s);
            af         = min(sqrt(Cf2(j))/karman,0.5);
            bt         = max(Cf3(j)^(-1.1)*h(j)^2*abs(iR(j))*abs(sn(j)*asR(j)+abs(iR(j))),0)^0.25;
            btp        = max(Cf3(j)^(-1.1)*h(j)^2*(iR(j))*abs(asR(j)+iR(j)),0)^0.25;
            btm        = max(Cf3(j)^(-1.1)*h(j)^2*(-iR(j))*abs(-asR(j)-iR(j)),0)^0.25;
            psi(j)     = (1+modtyp*0.52*(bt*Cf3(j).^0.15)*exp(-(2.6*bt*Cf3(j).^0.15)^(-1.5))).^2;  %(W. Ottevanger, 2009)
            atau0(j)   = 2/karman^2*(1-af);%*sn(j); 
            fac(j)     = 1-modtyp.*exp(-0.4./(bt.*(bt.^3+0.25)));                                  %(W. Ottevanger, 2009)
            fac2(j)    = 1-modtyp.*exp(-1./(bt.*(bt+0.25)));
            atau(j)    = fac2(j)*atau0(j)/calfac;
            psias(j)   = 1+modtyp.*(W(j)^2/12*(asR(j)^2+2*iR(j)*asR(j)));                          %(BdV, 2009)
            psitur(j)  = 1+modtyp*karman^2/10/Cf3(j)*(5*abs(iR(j))*q(j)*fac(j))^2;                 %(Blanckaert, 2009)
            psitot0(j) = (psi(j)*psias(j)*psitur(j))^modtyp;
            fsfn0(j)   = (8*(af).*(exp(-3.3*af.^(2/3))));                                          %(W. Ottevanger, 2009)
            fsfnd(j)   = fac(j)*fsfn0(j);
            fnfnd(j)   = fac(j)*(-1.5*log(af)+0.78)^2; 
            beta(j)    = bt;
            betap(j)   = btp;
            betam(j)   = btm;
        end
        
        % Inertial adaptation
        del = (13*sqrt(Cf2)).^(-2).*((13*sqrt(Cf2)).^(-1)-1/12);
        del = del./((13*sqrt(Cf2)).^(-2)/12 - (13*sqrt(Cf2)).^(-1)/40+1/945);
        l1  = h./Cf3./del;
        lambda_sec = l1;
        %l1  = 0.8*h./sqrt(Cf3);
        fnfndR0 = fnfnd.*iR;
        if length(FasRb)>2
           fnfndR0(1) = FasRb(3);
        end
        [fnfndR] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,fnfndR0);          %fnfndR = iL0*fnfndR0;
        fnfnd0 = fnfnd;
        [fnfnd] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,fnfnd0);          %fnfndR = iL0*fnfndR0;
        [psitot] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,psitot0);          %psitot = iL0*psitot0';
        Cf3   = psitot.*Cf2;
        [fnfnd] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,fnfnd.*sign(iR));   %fnfnd  = iL0*(fnfnd.*sign(iR));
        fsfndR = fsfnd.*iR;
        if length(FasRb)>1
           fsfndR(1) = FasRb(2);
        end
        %fsfndR(1) = -1;
        [fsfndR] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,fsfndR);           %fsfndR = iL0*fsfndR;
        [atau] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,atau);               %atau   = iL0*atau;%.*sign(fsfnd);
        [atauR] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,atau.*iR);               %atau   = iL0*atau;%.*sign(fsfnd);
        thet = Cf3.*(q./h).^2/g/relden/D50;
        Ainf  = atau./Gthet;
        if (smoothrad == 0)
           [iR] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,iR0);         %atau  = iL0*atau;%.*sign(fsfnd);
        end
        iRs   = iR;
        [AR] = tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,AR0);         %atau  = iL0*atau;%.*sign(fsfnd);

        dsAR = matprodsol(B2a,B2b,B2c,AR);
        dsiR = matprodsol(B2a,B2b,B2c,iR);
        dsasR = matprodsol(B2a,B2b,B2c,asR);
        dsiRs = matprodsol(B2a,B2b,B2c,iRs);

        %Kino -> 9*(0.000832/0.15)^0.3
        %Gthet     = 1/Ashld./(thetcr.*cos(modtyp*atan(AR.*h))).^(Bshld);
        UnUs = W.^2/8.*((dsasR+Sn*Fr^2*dsiR+dsAR));
        Gthet     = 1./(Ashld*(thet).^(Bshld))./cos(atan(UnUs)).^modtyp/calfac;

        AinfR = atau./Gthet.*iR;% - UnUs./Gthet./h ; %tdsol(l1.*B2a,l1.*B2b+B1b,l1.*B2c,);%abs(iR);
        %AinfR = atauR./Gthet;
        %lamdas = W.^2/pi^2./h./Gthet;
        if (modtyp == 1)
            for kl = 1:length(AR);
              BpAR = amplitude*W(kl)/pi*AR(kl);
              %hold on;
              %pause(0.1);
              BpasR = amplitude*W(kl)/pi*asR(kl);
              BRPi = strongcurvature*W(kl)/pi*iR(kl);
              BR   = strongcurvature*W(kl)*iR(kl);
              UnUs0 =UnUs(kl);
              fP1_AR(kl)  = sum(fp1_a_apr.*BpAR.^fp1_b_apr);
              %plot(kl,fp1_AR(kl),'.');
              fP1_asR(kl) = sum(fp1_a_apr.*BpasR.^fp1_b_apr);
              fP2_AR(kl)  = sum(fp2_a_apr.*BpAR.^fp2_b_apr)*BR ...
                          + sum(fp2_a2_apr.*BpAR.^fp2_b2_apr);
              fP2_asR(kl) = sum(fp2_a_apr.*BpasR.^fp2_b_apr)*BR ...
                          + sum(fp2_a2_apr.*BpasR.^fp2_b2_apr);              
              fP3(kl)     = sum(fp3_a_apr.*UnUs0.^fp3_b_apr);
              %fP1_AR(kl) = 1+(5014575/16777216)*BpAR^26 ...
              %                -(4/3)*BpAR*BRPi-(4294967296/9917826435)*BpAR^31*BRPi-(39614081257132168796771975168/156050375086257748529223875175)*BpAR^95*BRPi-(288230376151711744/916312070471295267)*BpAR^61*BRPi-(18889465931478580854784/66341473743672640538025)*BpAR^75*BRPi-(147573952589676412928/490814965447899948765)*BpAR^67*BRPi-(1208925819614629174706176/4407140026306214111899215)*BpAR^81*BRPi+(2268783825/8589934592)*BpAR^34-(131072/230945)*BpAR^17*BRPi+(121683714103007/562949953421312)*BpAR^52+(53098072606098965203605/302231454903657293676544)*BpAR^80-(134217728/300540195)*BpAR^29*BRPi+(209863810776486386280915/1208925819614629174706176)*BpAR^82+(3184701532372607112841303575/19807040628566084398385987584)*BpAR^96-(316912650057057350374175801344/1273753224887747940852007777857)*BpAR^99*BRPi-(2361183241434822606848/8075853860052271220473)*BpAR^71*BRPi-(1237940039285380274899124224/4826300260399724181316202325)*BpAR^93*BRPi+(8061900920775/35184372088832)*BpAR^46+(916312070471295267/4611686018427387904)*BpAR^62-(4722366482869645213696/16369974040646495717175)*BpAR^73*BRPi+(7391536347803839/36028797018963968)*BpAR^58-(2251799813685248/6692604275665385)*BpAR^53*BRPi+(6489213830472088210604445/38685626227668133590597632)*BpAR^88+(956086325095055/4503599627370496)*BpAR^54-(4835703278458516698824704/17838423916001342833877775)*BpAR^83*BRPi+(110628135069209194801/590295810358705651712)*BpAR^70-(154742504910672534362390528/590518458572960027165004495)*BpAR^89*BRPi+(414847067813984717066925/2417851639229258349412352)*BpAR^84+(1804857108504066435/9223372036854775808)*BpAR^64+(583401555/2147483648)*BpAR^32+(263012370465/1099511627776)*BpAR^42+(25674715590128696833261065/154742504910672534362390528)*BpAR^90+(9694845/33554432)*BpAR^28-(8796093022208/24185702762325)*BpAR^45*BRPi-(16/15)*BpAR^3*BRPi+(218266320541953276229/1180591620717411303424)*BpAR^72+(1879204156221315/9007199254740992)*BpAR^56+(1701063429324939500975/9444732965739290427392)*BpAR^76+(514589420475/2199023255552)*BpAR^44-(549755813888/1412926920405)*BpAR^39*BRPi-(512/693)*BpAR^9*BRPi-(618970019642690137449562112/2387748549881968805493279045)*BpAR^91*BRPi-(8388608/16900975)*BpAR^23*BRPi+(5/8)*BpAR^4+(24975553429171528252000152507/158456325028528675187087900672)*BpAR^100-(140737488355328/395033145117975)*BpAR^47*BRPi+(63/128)*BpAR^8+(300540195/1073741824)*BpAR^30+(3281063172710606398620225/19342813113834066795298816)*BpAR^86-(34359738368/83945001525)*BpAR^35*BRPi+(67282234305/274877906944)*BpAR^40-(1099511627776/2893136075115)*BpAR^41*BRPi-(524288/969969)*BpAR^19*BRPi+(88179/262144)*BpAR^20-(32/35)*BpAR^5*BRPi-(9671406556917033397649408/36091694899816670384822475)*BpAR^85*BRPi-(18014398509481984/54496920530418135)*BpAR^55*BRPi-(18446744073709551616/59560284580634192355)*BpAR^63*BRPi-(144115188075855872/450883717216034179)*BpAR^59*BRPi+(15801325804719/70368744177664)*BpAR^48-(65536/109395)*BpAR^15*BRPi-(4096/6435)*BpAR^13*BRPi+(14544636039226909/72057594037927936)*BpAR^60-(1048576/2028117)*BpAR^21*BRPi+(50803160635786570329644235/309485009821345068724781056)*BpAR^92-(2048/3003)*BpAR^11*BRPi+(676039/2097152)*BpAR^22+(34461632205/137438953472)*BpAR^38-(256/315)*BpAR^7*BRPi+(12155/32768)*BpAR^16-(1125899906842624/3285460280781189)*BpAR^51*BRPi+(14023284727082855679/73786976294838206464)*BpAR^68+(4418157975/17179869184)*BpAR^36+(46189/131072)*BpAR^18-(36028797018963968/110873045217057585)*BpAR^57*BRPi+(1300075/4194304)*BpAR^24-(67108864/145422675)*BpAR^27*BRPi-(68719476736/172308161025)*BpAR^37*BRPi-(604462909807314587353088/2177020976850057573347805)*BpAR^79*BRPi-(16777216/35102025)*BpAR^25*BRPi-(36893488147419103232/120925426269772451145)*BpAR^65*BRPi+(35/64)*BpAR^6+(7113260368810144185/36893488147419103232)*BpAR^66+(6435/16384)*BpAR^14+(231/512)*BpAR^10-(8589934592/20419054425)*BpAR^33*BRPi-(79228162514264337593543950336/315285451704888104171289053925)*BpAR^97*BRPi-(281474976710656/805867616040669)*BpAR^49*BRPi-(77371252455336267181195264/292014622371243969477200025)*BpAR^87*BRPi+(429/1024)*BpAR^12+(1608766753466574727105400775/9903520314283042199192993792)*BpAR^94-(295147905179352825856/995653215622882753209)*BpAR^69*BRPi+(861577581086657669325/4722366482869645213696)*BpAR^74-(4398046511104/11835556670925)*BpAR^43*BRPi+(3/4)*BpAR^2-(37778931862957161709568/134384010916670220577025)*BpAR^77*BRPi+(12611418068195524166851562157/79228162514264337593543950336)*BpAR^98+(26876802183334044115405/151115727451828646838272)*BpAR^78+(61989816618513/281474976710656)*BpAR^50;
              %fP1_AR(kl) = min(fP1_AR(kl),5);
              %fP2_AR(kl) = -0.6429266032e-2*BpAR^37-0.2639596487e-2*BpAR^69-0.1709936098e-2*BpAR^93-0.4078371656e-2*BpAR^51-0.1854705811e-1*BpAR^17-0.1884744337e-2*BpAR^87-0.3660238109e-2*BpAR^55-0.3010507689e-2*BpAR^63-0.9963065386e-2*BpAR^27-0.1107007265e-1*BpAR^25-0.3222656250e-1*BpAR^11-0.2168972653e-2*BpAR^79-0.1949735521e-2*BpAR^85-0.3477226204e-2*BpAR^57-0.5468750000e-1*BpAR^7-0.7546319976e-2*BpAR^33-0.1823285282e-2*BpAR^89-0.1401567459e-1*BpAR^21-0.3153865198e-2*BpAR^61-0.1657591115e-2*BpAR^95-0.1765095327e-2*BpAR^91-0.4318275872e-2*BpAR^49-0.2018549716e-2*BpAR^83-0.2532585819e-2*BpAR^71-0.9029028006e-2*BpAR^29-0.4101562500e-1*BpAR^9-0.5970032744e-2*BpAR^39-0.4582660109e-2*BpAR^47-.1250000000*BpAR^3-0.2182006836e-1*BpAR^15-0.2618408203e-1*BpAR^13-0.2754361552e-2*BpAR^67-0.2251338703e-2*BpAR^77-0.5562985057e-2*BpAR^41-0.2091509344e-2*BpAR^81-0.8232349064e-2*BpAR^31-0.3308973323e-2*BpAR^59-0.7812500000e-1*BpAR^5+0.1547847363e-2*BR*BpAR^56+0.1475415865e-2*BR*BpAR^58+0.4259215762e-2*BR*BpAR^26+0.1408505920e-2*BR*BpAR^60+0.4710847964e-2*BR*BpAR^24+0.8281854728e-3*BR*BpAR^88+0.3547754632e-2*BR*BpAR^30+0.1346543204e-2*BR*BpAR^62+0.1095477990e-2*BR*BpAR^72+0.2147631276e-1*BR*BpAR^6+0.3007010547e-1*BR*BpAR^4+0.6702764629e-2*BR*BpAR^18+0.1302330225e-1*BR*BpAR^10+0.1636346113e-1*BR*BpAR^8+0.1016257739e-2*BR*BpAR^76+0.9141628858e-3*BR*BpAR^82+0.1139066668e-2*BR*BpAR^70+0.7329393764e-3*BR*BpAR^96+0.2606009432e-2*BR*BpAR^38+0.3016004048e-2*BR*BpAR^34+0.8552817656e-3*BR*BpAR^86+0.1235524563e-2*BR*BpAR^66+0.7549644825e-3*BR*BpAR^94+0.9462067364e-3*BR*BpAR^80+0.1054619865e-2*BR*BpAR^74+0.1289028193e-2*BR*BpAR^64+0.2144373067e-2*BR*BpAR^44+0.8995255163e-2*BR*BpAR^14+0.1805458536e-2*BR*BpAR^50+0.2434887080e-2*BR*BpAR^40+0.5249668808e-2*BR*BpAR^22+0.1069575957e-1*BR*BpAR^12+0.2798406947e-2*BR*BpAR^36+0.4683290264e-1*BR*BpAR^2+0.7119715241e-3*BR*BpAR^98+0.2281870140e-2*BR*BpAR^42+0.7707030822e-2*BR*BpAR^16+0.9801824062e-3*BR*BpAR^78+0.1626463727e-2*BR*BpAR^54+0.3876118578e-2*BR*BpAR^28+0.1712034769e-2*BR*BpAR^52+0.2020267826e-2*BR*BpAR^46+0.7781233281e-3*BR*BpAR^92+0.3263712570e-2*BR*BpAR^32+0.8838999183e-3*BR*BpAR^84+0.6919909642e-3*BR*BpAR^100+0.1907788495e-2*BR*BpAR^48-0.3859887461e-2*BpAR^53-0.1560573282e-2*BpAR^99-0.1601791382e-1*BpAR^19-0.6950557872e-2*BpAR^35-0.2877691174e-2*BpAR^65-0.1239848137e-1*BpAR^23-0.5200181683e-2*BpAR^43+0.9006327431e-1*BR-0.2432615326e-2*BpAR^73-0.1607863382e-2*BpAR^97-0.4875170328e-2*BpAR^45-.2500000000*BpAR-0.2339053198e-2*BpAR^75+0.8024996837e-3*BR*BpAR^90+0.5901456098e-2*BR*BpAR^20+0.1185649667e-2*BR*BpAR^68;
              %fP2_AR(kl) = (4096/109395)*BpAR^14*BRPi-(125280277081421/36028797018963968)*BpAR^57+(288230376151711744/59560284580634192355)*BpAR^62*BRPi-(37713369801271337915175/19342813113834066795298816)*BpAR^85-(7/128)*BpAR^7-(29393/2097152)*BpAR^21+(79228162514264337593543950336/31843830622193698521300194446425)*BpAR^98*BRPi-(127388061294904284513652143/79228162514264337593543950336)*BpAR^97-(1558142747453650631/590295810358705651712)*BpAR^69+(65536/2078505)*BpAR^16*BRPi+(32/315)*BpAR^6*BRPi-(52003/4194304)*BpAR^23+(604462909807314587353088/180692741078554778587867815)*BpAR^80*BRPi+(134217728/9917826435)*BpAR^30*BRPi-(203236010537432691/73786976294838206464)*BpAR^67+(8796093022208/1185099435353925)*BpAR^46*BRPi+(1237940039285380274899124224/468151125258773245587671625525)*BpAR^94*BRPi-(2989949596465113373/1180591620717411303424)*BpAR^71-(334305/33554432)*BpAR^27+(1125899906842624/180700315442965395)*BpAR^52*BRPi+(154742504910672534362390528/54918216647285282526345418035)*BpAR^90*BRPi-(6116566755/1099511627776)*BpAR^41-(11487701081155435591/4722366482869645213696)*BpAR^73-(340212685864987900195/151115727451828646838272)*BpAR^77-(16934386878595523443214745/9903520314283042199192993792)*BpAR^93-(238436656380769/72057594037927936)*BpAR^59+(316912650057057350374175801344/131196582163438037907756801119271)*BpAR^100*BRPi+(18446744073709551616/3990539066902490887785)*BpAR^64*BRPi+(147573952589676412928/34847862546800896362315)*BpAR^68*BRPi-(27767032438524099/9223372036854775808)*BpAR^63-(322476036831/70368744177664)*BpAR^47-(282139731759656009156715/154742504910672534362390528)*BpAR^89+(2048/45045)*BpAR^12*BRPi+(77371252455336267181195264/26573330635783201222425202275)*BpAR^88*BRPi-(1215486600363/281474976710656)*BpAR^49+(4722366482869645213696/1260488001129780170222475)*BpAR^74*BRPi-(106168065206121555/36893488147419103232)*BpAR^65+(4294967296/347123925225)*BpAR^32*BRPi-(17678835/2147483648)*BpAR^31+(524288/22309287)*BpAR^20*BRPi+(1099511627776/130191123380175)*BpAR^42*BRPi-(2295919134019/562949953421312)*BpAR^51+(67108864/4508102925)*BpAR^28*BRPi-(22091732848375837675/9444732965739290427392)*BpAR^75-(429/16384)*BpAR^13+(549755813888/60755857577415)*BpAR^40*BRPi-(883631595/137438953472)*BpAR^37+(9671406556917033397649408/3212160846083683664249200275)*BpAR^86*BRPi+(144115188075855872/28405674184610153277)*BpAR^60*BRPi-(9694845/1073741824)*BpAR^29+(2/3)*BRPi-(5/64)*BpAR^5-(11435320455/2199023255552)*BpAR^43-(715/32768)*BpAR^15+(18014398509481984/3215318311294669965)*BpAR^56*BRPi+(4/15)*BpAR^2*BRPi+(256/3465)*BpAR^8*BRPi+(36893488147419103232/8343854412614299129005)*BpAR^66*BRPi+(512/9009)*BpAR^10*BRPi-(32968493968795/9007199254740992)*BpAR^55+(68719476736/7064634602025)*BpAR^38*BRPi-(33/1024)*BpAR^11+(34359738368/3273855059475)*BpAR^36*BRPi-(1/8)*BpAR^3+(8589934592/755505013725)*BpAR^34*BRPi+(37778931862957161709568/10885104884250287866739025)*BpAR^78*BRPi-(4880553738988055494905/2417851639229258349412352)*BpAR^83+(16777216/1017958725)*BpAR^26*BRPi+(618970019642690137449562112/226836112238787036521861509275)*BpAR^92*BRPi-(119409675/17179869184)*BpAR^35-(546270544470823336877895/309485009821345068724781056)*BpAR^91-(21/512)*BpAR^9+(1208925819614629174706176/374606902236028199511433275)*BpAR^82*BRPi+(1048576/50702925)*BpAR^22*BRPi-(185725/16777216)*BpAR^25-(2431/131072)*BpAR^17-(32831974560542341369497975/19807040628566084398385987584)*BpAR^95-(1/4)*BpAR-(2528479647909474533505/1208925819614629174706176)*BpAR^81+(36028797018963968/6763255758240512685)*BpAR^58*BRPi-(655531760569123027205/302231454903657293676544)*BpAR^79-(17383387729001/4503599627370496)*BpAR^53+(140737488355328/20146690401016725)*BpAR^48*BRPi+(131072/4849845)*BpAR^18*BRPi-(64822395/8589934592)*BpAR^33+(2361183241434822606848/605689039503920341535475)*BpAR^72*BRPi-(1641030105/274877906944)*BpAR^39+(295147905179352825856/72682684740470440984257)*BpAR^70*BRPi+(2251799813685248/381478443712926945)*BpAR^54*BRPi-(4199/262144)*BpAR^19+(8388608/456326325)*BpAR^24*BRPi-(171529806825/35184372088832)*BpAR^45+(39614081257132168796771975168/15448987133539517104393163642325)*BpAR^96*BRPi+(4398046511104/556271163533475)*BpAR^44*BRPi-(247282707219520081702971807/158456325028528675187087900672)*BpAR^99-(72912514949124586636005/38685626227668133590597632)*BpAR^87+(16/105)*BpAR^4*BRPi+(281474976710656/42710983650155457)*BpAR^50*BRPi-(14544636039226909/4611686018427387904)*BpAR^61+(4835703278458516698824704/1551942880692116826547366425)*BpAR^84*BRPi+(18889465931478580854784/5240976425750138602503975)*BpAR^76*BRPi;
              %fP1_asR(kl) = 1+(5014575/16777216)*BpAR^26-(4/3)*BpAR*BRPi-(4294967296/9917826435)*BpAR^31*BRPi-(39614081257132168796771975168/156050375086257748529223875175)*BpAR^95*BRPi-(288230376151711744/916312070471295267)*BpAR^61*BRPi-(18889465931478580854784/66341473743672640538025)*BpAR^75*BRPi-(147573952589676412928/490814965447899948765)*BpAR^67*BRPi-(1208925819614629174706176/4407140026306214111899215)*BpAR^81*BRPi+(2268783825/8589934592)*BpAR^34-(131072/230945)*BpAR^17*BRPi+(121683714103007/562949953421312)*BpAR^52+(53098072606098965203605/302231454903657293676544)*BpAR^80-(134217728/300540195)*BpAR^29*BRPi+(209863810776486386280915/1208925819614629174706176)*BpAR^82+(3184701532372607112841303575/19807040628566084398385987584)*BpAR^96-(316912650057057350374175801344/1273753224887747940852007777857)*BpAR^99*BRPi-(2361183241434822606848/8075853860052271220473)*BpAR^71*BRPi-(1237940039285380274899124224/4826300260399724181316202325)*BpAR^93*BRPi+(8061900920775/35184372088832)*BpAR^46+(916312070471295267/4611686018427387904)*BpAR^62-(4722366482869645213696/16369974040646495717175)*BpAR^73*BRPi+(7391536347803839/36028797018963968)*BpAR^58-(2251799813685248/6692604275665385)*BpAR^53*BRPi+(6489213830472088210604445/38685626227668133590597632)*BpAR^88+(956086325095055/4503599627370496)*BpAR^54-(4835703278458516698824704/17838423916001342833877775)*BpAR^83*BRPi+(110628135069209194801/590295810358705651712)*BpAR^70-(154742504910672534362390528/590518458572960027165004495)*BpAR^89*BRPi+(414847067813984717066925/2417851639229258349412352)*BpAR^84+(1804857108504066435/9223372036854775808)*BpAR^64+(583401555/2147483648)*BpAR^32+(263012370465/1099511627776)*BpAR^42+(25674715590128696833261065/154742504910672534362390528)*BpAR^90+(9694845/33554432)*BpAR^28-(8796093022208/24185702762325)*BpAR^45*BRPi-(16/15)*BpAR^3*BRPi+(218266320541953276229/1180591620717411303424)*BpAR^72+(1879204156221315/9007199254740992)*BpAR^56+(1701063429324939500975/9444732965739290427392)*BpAR^76+(514589420475/2199023255552)*BpAR^44-(549755813888/1412926920405)*BpAR^39*BRPi-(512/693)*BpAR^9*BRPi-(618970019642690137449562112/2387748549881968805493279045)*BpAR^91*BRPi-(8388608/16900975)*BpAR^23*BRPi+(5/8)*BpAR^4+(24975553429171528252000152507/158456325028528675187087900672)*BpAR^100-(140737488355328/395033145117975)*BpAR^47*BRPi+(63/128)*BpAR^8+(300540195/1073741824)*BpAR^30+(3281063172710606398620225/19342813113834066795298816)*BpAR^86-(34359738368/83945001525)*BpAR^35*BRPi+(67282234305/274877906944)*BpAR^40-(1099511627776/2893136075115)*BpAR^41*BRPi-(524288/969969)*BpAR^19*BRPi+(88179/262144)*BpAR^20-(32/35)*BpAR^5*BRPi-(9671406556917033397649408/36091694899816670384822475)*BpAR^85*BRPi-(18014398509481984/54496920530418135)*BpAR^55*BRPi-(18446744073709551616/59560284580634192355)*BpAR^63*BRPi-(144115188075855872/450883717216034179)*BpAR^59*BRPi+(15801325804719/70368744177664)*BpAR^48-(65536/109395)*BpAR^15*BRPi-(4096/6435)*BpAR^13*BRPi+(14544636039226909/72057594037927936)*BpAR^60-(1048576/2028117)*BpAR^21*BRPi+(50803160635786570329644235/309485009821345068724781056)*BpAR^92-(2048/3003)*BpAR^11*BRPi+(676039/2097152)*BpAR^22+(34461632205/137438953472)*BpAR^38-(256/315)*BpAR^7*BRPi+(12155/32768)*BpAR^16-(1125899906842624/3285460280781189)*BpAR^51*BRPi+(14023284727082855679/73786976294838206464)*BpAR^68+(4418157975/17179869184)*BpAR^36+(46189/131072)*BpAR^18-(36028797018963968/110873045217057585)*BpAR^57*BRPi+(1300075/4194304)*BpAR^24-(67108864/145422675)*BpAR^27*BRPi-(68719476736/172308161025)*BpAR^37*BRPi-(604462909807314587353088/2177020976850057573347805)*BpAR^79*BRPi-(16777216/35102025)*BpAR^25*BRPi-(36893488147419103232/120925426269772451145)*BpAR^65*BRPi+(35/64)*BpAR^6+(7113260368810144185/36893488147419103232)*BpAR^66+(6435/16384)*BpAR^14+(231/512)*BpAR^10-(8589934592/20419054425)*BpAR^33*BRPi-(79228162514264337593543950336/315285451704888104171289053925)*BpAR^97*BRPi-(281474976710656/805867616040669)*BpAR^49*BRPi-(77371252455336267181195264/292014622371243969477200025)*BpAR^87*BRPi+(429/1024)*BpAR^12+(1608766753466574727105400775/9903520314283042199192993792)*BpAR^94-(295147905179352825856/995653215622882753209)*BpAR^69*BRPi+(861577581086657669325/4722366482869645213696)*BpAR^74-(4398046511104/11835556670925)*BpAR^43*BRPi+(3/4)*BpAR^2-(37778931862957161709568/134384010916670220577025)*BpAR^77*BRPi+(12611418068195524166851562157/79228162514264337593543950336)*BpAR^98+(26876802183334044115405/151115727451828646838272)*BpAR^78+(61989816618513/281474976710656)*BpAR^50;
              %fP1_asR(kl) = min(fP1_asR(kl),5);
              %fP2_asR(kl) = (4096/109395)*BpAR^14*BRPi-(125280277081421/36028797018963968)*BpAR^57+(288230376151711744/59560284580634192355)*BpAR^62*BRPi-(37713369801271337915175/19342813113834066795298816)*BpAR^85-(7/128)*BpAR^7-(29393/2097152)*BpAR^21+(79228162514264337593543950336/31843830622193698521300194446425)*BpAR^98*BRPi-(127388061294904284513652143/79228162514264337593543950336)*BpAR^97-(1558142747453650631/590295810358705651712)*BpAR^69+(65536/2078505)*BpAR^16*BRPi+(32/315)*BpAR^6*BRPi-(52003/4194304)*BpAR^23+(604462909807314587353088/180692741078554778587867815)*BpAR^80*BRPi+(134217728/9917826435)*BpAR^30*BRPi-(203236010537432691/73786976294838206464)*BpAR^67+(8796093022208/1185099435353925)*BpAR^46*BRPi+(1237940039285380274899124224/468151125258773245587671625525)*BpAR^94*BRPi-(2989949596465113373/1180591620717411303424)*BpAR^71-(334305/33554432)*BpAR^27+(1125899906842624/180700315442965395)*BpAR^52*BRPi+(154742504910672534362390528/54918216647285282526345418035)*BpAR^90*BRPi-(6116566755/1099511627776)*BpAR^41-(11487701081155435591/4722366482869645213696)*BpAR^73-(340212685864987900195/151115727451828646838272)*BpAR^77-(16934386878595523443214745/9903520314283042199192993792)*BpAR^93-(238436656380769/72057594037927936)*BpAR^59+(316912650057057350374175801344/131196582163438037907756801119271)*BpAR^100*BRPi+(18446744073709551616/3990539066902490887785)*BpAR^64*BRPi+(147573952589676412928/34847862546800896362315)*BpAR^68*BRPi-(27767032438524099/9223372036854775808)*BpAR^63-(322476036831/70368744177664)*BpAR^47-(282139731759656009156715/154742504910672534362390528)*BpAR^89+(2048/45045)*BpAR^12*BRPi+(77371252455336267181195264/26573330635783201222425202275)*BpAR^88*BRPi-(1215486600363/281474976710656)*BpAR^49+(4722366482869645213696/1260488001129780170222475)*BpAR^74*BRPi-(106168065206121555/36893488147419103232)*BpAR^65+(4294967296/347123925225)*BpAR^32*BRPi-(17678835/2147483648)*BpAR^31+(524288/22309287)*BpAR^20*BRPi+(1099511627776/130191123380175)*BpAR^42*BRPi-(2295919134019/562949953421312)*BpAR^51+(67108864/4508102925)*BpAR^28*BRPi-(22091732848375837675/9444732965739290427392)*BpAR^75-(429/16384)*BpAR^13+(549755813888/60755857577415)*BpAR^40*BRPi-(883631595/137438953472)*BpAR^37+(9671406556917033397649408/3212160846083683664249200275)*BpAR^86*BRPi+(144115188075855872/28405674184610153277)*BpAR^60*BRPi-(9694845/1073741824)*BpAR^29+(2/3)*BRPi-(5/64)*BpAR^5-(11435320455/2199023255552)*BpAR^43-(715/32768)*BpAR^15+(18014398509481984/3215318311294669965)*BpAR^56*BRPi+(4/15)*BpAR^2*BRPi+(256/3465)*BpAR^8*BRPi+(36893488147419103232/8343854412614299129005)*BpAR^66*BRPi+(512/9009)*BpAR^10*BRPi-(32968493968795/9007199254740992)*BpAR^55+(68719476736/7064634602025)*BpAR^38*BRPi-(33/1024)*BpAR^11+(34359738368/3273855059475)*BpAR^36*BRPi-(1/8)*BpAR^3+(8589934592/755505013725)*BpAR^34*BRPi+(37778931862957161709568/10885104884250287866739025)*BpAR^78*BRPi-(4880553738988055494905/2417851639229258349412352)*BpAR^83+(16777216/1017958725)*BpAR^26*BRPi+(618970019642690137449562112/226836112238787036521861509275)*BpAR^92*BRPi-(119409675/17179869184)*BpAR^35-(546270544470823336877895/309485009821345068724781056)*BpAR^91-(21/512)*BpAR^9+(1208925819614629174706176/374606902236028199511433275)*BpAR^82*BRPi+(1048576/50702925)*BpAR^22*BRPi-(185725/16777216)*BpAR^25-(2431/131072)*BpAR^17-(32831974560542341369497975/19807040628566084398385987584)*BpAR^95-(1/4)*BpAR-(2528479647909474533505/1208925819614629174706176)*BpAR^81+(36028797018963968/6763255758240512685)*BpAR^58*BRPi-(655531760569123027205/302231454903657293676544)*BpAR^79-(17383387729001/4503599627370496)*BpAR^53+(140737488355328/20146690401016725)*BpAR^48*BRPi+(131072/4849845)*BpAR^18*BRPi-(64822395/8589934592)*BpAR^33+(2361183241434822606848/605689039503920341535475)*BpAR^72*BRPi-(1641030105/274877906944)*BpAR^39+(295147905179352825856/72682684740470440984257)*BpAR^70*BRPi+(2251799813685248/381478443712926945)*BpAR^54*BRPi-(4199/262144)*BpAR^19+(8388608/456326325)*BpAR^24*BRPi-(171529806825/35184372088832)*BpAR^45+(39614081257132168796771975168/15448987133539517104393163642325)*BpAR^96*BRPi+(4398046511104/556271163533475)*BpAR^44*BRPi-(247282707219520081702971807/158456325028528675187087900672)*BpAR^99-(72912514949124586636005/38685626227668133590597632)*BpAR^87+(16/105)*BpAR^4*BRPi+(281474976710656/42710983650155457)*BpAR^50*BRPi-(14544636039226909/4611686018427387904)*BpAR^61+(4835703278458516698824704/1551942880692116826547366425)*BpAR^84*BRPi+(18889465931478580854784/5240976425750138602503975)*BpAR^76*BRPi;
              %fP2_asR(kl) =
              %-0.6429266032e-2*BpAR^37-0.2639596487e-2*BpAR^69-0.1709936098e-2*BpAR^93-0.4078371656e-2*BpAR^51-0.1854705811e-1*BpAR^17-0.1884744337e-2*BpAR^87-0.3660238109e-2*BpAR^55-0.3010507689e-2*BpAR^63-0.9963065386e-2*BpAR^27-0.1107007265e-1*BpAR^25-0.3222656250e-1*BpAR^11-0.2168972653e-2*BpAR^79-0.1949735521e-2*BpAR^85-0.3477226204e-2*BpAR^57-0.5468750000e-1*BpAR^7-0.7546319976e-2*BpAR^33-0.1823285282e-2*BpAR^89-0.1401567459e-1*BpAR^21-0.3153865198e-2*BpAR^61-0.1657591115e-2*BpAR^95-0.1765095327e-2*BpAR^91-0.4318275872e-2*BpAR^49-0.2018549716e-2*BpAR^83-0.2532585819e-2*BpAR^71-0.9029028006e-2*BpAR^29-0.4101562500e-1*BpAR^9-0.5970032744e-2*BpAR^39-0.4582660109e-2*BpAR^47-.1250000000*BpAR^3-0.2182006836e-1*BpAR^15-0.2618408203e-1*BpAR^13-0.2754361552e-2*BpAR^67-0.2251338703e-2*BpAR^77-0.5562985057e-2*BpAR^41-0.2091509344e-2*BpAR^81-0.8232349064e-2*BpAR^31-0.3308973323e-2*BpAR^59-0.7812500000e-1*BpAR^5+0.1547847363e-2*BR*BpAR^56+0.1475415865e-2*BR*BpAR^58+0.4259215762e-2*BR*BpAR^26+0.1408505920e-2*BR*BpAR^60+0.4710847964e-2*BR*BpAR^24+0.8281854728e-3*BR*BpAR^88+0.3547754632e-2*BR*BpAR^30+0.1346543204e-2*BR*BpAR^62+0.1095477990e-2*BR*BpAR^72+0.2147631276e-1*BR*BpAR^6+0.3007010547e-1*BR*BpAR^4+0.6702764629e-2*BR*BpAR^18+0.1302330225e-1*BR*BpAR^10+0.1636346113e-1*BR*BpAR^8+0.1016257739e-2*BR*BpAR^76+0.9141628858e-3*BR*BpAR^82+0.1139066668e-2*BR*BpAR^70+0.7329393764e-3*BR*BpAR^96+0.2606009432e-2*BR*BpAR^38+0.3016004048e-2*BR*BpAR^34+0.8552817656e-3*BR*BpAR^86+0.1235524563e-2*BR*BpAR^66+0.7549644825e-3*BR*BpAR^94+0.9462067364e-3*BR*BpAR^80+0.1054619865e-2*BR*BpAR^74+0.1289028193e-2*BR*BpAR^64+0.2144373067e-2*BR*BpAR^44+0.8995255163e-2*BR*BpAR^14+0.1805458536e-2*BR*BpAR^50+0.2434887080e-2*BR*BpAR^40+0.5249668808e-2*BR*BpAR^22+0.1069575957e-1*BR*BpAR^12+0.2798406947e-2*BR*BpAR^36+0.4683290264e-1*BR*BpAR^2+0.7119715241e-3*BR*BpAR^98+0.2281870140e-2*BR*BpAR^42+0.7707030822e-2*BR*BpAR^16+0.9801824062e-3*BR*BpAR^78+0.1626463727e-2*BR*BpAR^54+0.3876118578e-2*BR*BpAR^28+0.1712034769e-2*BR*BpAR^52+0.2020267826e-2*BR*BpAR^46+0.7781233281e-3*BR*BpAR^92+0.3263712570e-2*BR*BpAR^32+0.8838999183e-3*BR*BpAR^84+0.6919909642e-3*BR*BpAR^100+0.1907788495e-2*BR*BpAR^48-0.3859887461e-2*BpAR^53-0.1560573282e-2*BpAR^99-0.1601791382e-1*BpAR^19-0.6950557872e-2*BpAR^35-0.2877691174e-2*BpAR^65-0.1239848137e-1*BpAR^23-0.5200181683e-2*BpAR^43+0.9006327431e-1*BR-0.2432615326e-2*BpAR^73-0.1607863382e-2*BpAR^97-0.4875170328e-2*BpAR^45-.2500000000*BpAR-0.2339053198e-2*BpAR^75+0.8024996837e-3*BR*BpAR^90+0.5901456098e-2*BR*BpAR^20+0.1185649667e-2*BR*BpAR^68;
            end
        end
     
        %pause(1)

        lamdas  = W.^2./pi^2./h./Gthet;
        lamdas  = lamdas(:); 
        
        FAR1   = AinfR;
        FAR2   = (b-1)*fP1_asR.*lamdas.*dsasR;
        FAR3   = modtyp*(-(b-1)*fP3.*UnUs.^2).*(UnUs./h./Gthet-AinfR + AR);
        %FAR4   = modtyp*2/3*iR.*UnUs.*((b-1)*asR+AR);
        FAR3   = FAR3 + modtyp*((b-1).*UnUs-b*Gthet.*h.*AinfR+b*Gthet.*h.*AR).*lamdas.*pi./W.*fP2_asR.*asR;
        FAR3   = FAR3 + modtyp*(-UnUs.*lamdas.*pi./W.*fP2_AR.*AR);
        FAR    = FAR1 + FAR2 + FAR3;
        if bedtype == 3
           AR    = tdsol(fP1_AR.*lamdas.*B2a,fP1_AR.*lamdas.*B2b+B1b,fP1_AR.*lamdas.*B2c,FAR);
           %plot(s,AR);
           %pause(0.1);
           %AR0    = AR;
        else
           AR    = AR0;
        end
        


        %Calculate solution
        F1   = 0.5*(Sn*Fr^2*iR + AR - iR);
        F2   = - 0.5*h./Cf3.*dsiRs.*(1-W.^2.*iR.*iR/6*modtyp);
        F3   = 4*chi*h.^2./(W.^2)./Cf3.*fsfndR.*((W.^2.*(Sn*Fr^2*iR + AR + 3*iR).*iR/12)*modtyp+1);
        F4   = modtyp*W.^2/24.*h./Cf3.*iR.^2.*(Sn*Fr^2*dsiRs+dsAR);
        FasR =  F1 + F2 + F3 + F4;     %(BdV, 2009: eq. (38)
                
        l1  = 0.5*h./Cf3.*((max(sn.*asR+abs(iR),0).*abs(iR)).*W.^2/12*modtyp+1);
        %l1  = 0.5*h./Cf3.*(((asR+iR).*(iR)).*W.^2/12+1).^modtyp;
        
        %Boundary condition;
        FasR(1)  =  FasRb(1);
        FasR(end)=  0;
        B1b2     = B1b;
        B1b2(end)= 0;
        
        asR0 = asR;
        [asRnew] = tdsol(l1.*B2a,l1.*B2b+B1b2,l1.*B2c,FasR);          %fnfndR = iL0*fnfndR0;
        asR = rn*asR+(1-rn)*asRnew;
        asR = real(asR);
        if k>2;
        asRdiff = max((asR-asR0).^2);
        end
        %asR     = asR - mean(asR);
        %asRdiff = max([abs(asRave-asRaveold);max(10-k,0)]);%1;%max(abs(asR-asR0));
        if (streamcurv == 1)
            %iRs = (1-difval)*iRs + difval*((asR + iR).*(W^2/8.*(B2*(asR+Sn*Fr^2*iR+AR)')').^2 + W^2/8.*(B4*(asR+Sn*Fr^2*iR+AR)')');
            iRs = iR + (asR + iR).*(W.^2/8.*((dsasR+Sn*Fr^2*dsiR+dsAR))).^2 + ...
                W.^2/8.*matprodsol(B4a,B4b,B4c,asR+Sn*Fr^2*iR+AR);   %(B4*(asR+Sn*Fr^2*iR+AR)));
            dsiRs = matprodsol(B2a,B2b,B2c,iRs);
        end
    end
    %Calculate erosion distance...
    d = Eu/2.*W.*asR.*q./h;
    
    % Determine timestep
    dt2 = dt;
    
    disp([dt,dt2,min(diff(s)),max(diff(s))]);
    
    dt = dt-dt2;
    
    % Shift points    [x,y] = spline2shift(x,y,ang,dt2*sn.*d);%,sn.*abs(iR));
    
    
end

%% Downstream boundary condition
t   = s<=L;
q   = q(t);
h   = h(t);
asR = asR(t);
s   = s(t);
iR  = iR(t);
Cf3 = Cf3(t);
%y   = y(t);
%x   = x(t);


%% Output
output.asR    = asR;
output.Ainf   = Ainf;
output.AR     = AR;
output.atau0  = atau0;
output.atau   = atau;
output.atauR  = atauR;
output.b      = iS.*s;
output.beta   = beta;
output.betap  = betap;
output.betam  = betam;
output.Cf3    = Cf3;
output.del    = del;
output.dsasR  = dsasR;
output.dsiR   = dsiR;
output.F1     = F1;
output.F2     = F2;
output.F3     = F3;
output.F4     = F4;
output.FAR    = FAR;
output.FAR1   = FAR1;
output.FAR2   = FAR2;
output.FAR3   = FAR3;
output.fP1_AR = fP1_AR;
output.fP1_asR= fP1_asR;
output.fP2_AR = fP2_AR;
output.fP2_asR= fP2_asR;
output.AinfR  = AinfR;
output.fac    = fac;
output.fac2   = fac2;
output.fsfnd  = fsfnd;
output.fsfndR = fsfndR;
output.fnfnd  = fnfnd;
output.fnfndR = fnfndR;
output.fnfndR0= fnfndR0;
output.Gthet  = Gthet;
output.h      = h;
output.iR     = iR;
output.lambda = 0.5*h./Cf3.*((max(-sign(iR).*asR+iR,1e-8).*abs(iR)).*W.^2/12+1).^modtyp;
output.lambda_sec = lambda_sec;
output.lamdas = lamdas;
output.psias  = psias;
output.thet   = thet;
output.thetcr = thetcr;
output.psi    = psi;
output.q      = q;
output.s      = s;
output.sn     = sn;
output.UnUs   = UnUs;
output.W      = W;
output.psitur = psitur;
