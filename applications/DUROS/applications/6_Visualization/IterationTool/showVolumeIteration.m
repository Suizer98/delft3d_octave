function showVolumeIteration(varargin)

if nargin==6
    %% create gui

    %% get input variables
    [h.xInitial, h.zInitial, h.D50, h.WL, h.Hs, h.Tp] = deal(varargin{:});
    [h.xInitial,h.zInitial,h.D50,h.WL,h.Hs,h.Tp] = DUROSCheckConditions(h.xInitial,h.zInitial,h.D50,h.WL,h.Hs,h.Tp);
    
%     %% derive screensize and height-width ratio
%     TODO: make window height-width ratio constant, independent of the
%     screen size
%     Units = get(0, 'Units');
%     set(0,...
%         'Units', 'pixels')
%     ScreenSize = get(0, 'ScreenSize');
%     ScreenRatio = ScreenSize(4)/ScreenSize(3);
%     set(0,...
%         'Units', Units);
    
    %% build figure
    h.fig = figure(...
        'Color','w',...
        'Name','Iteration process DORUS+',...
        'NumberTitle','off',...
        'Toolbar','Figure',...
        'PointerShapeCData',movepointer,...
        'PointerShapeHotSpot',[8,8],...
        'WindowButtonMotionFcn',{@showVolumeIteration,'motion'},...
        'Menubar','none',...
        'Units','normalized',...
        'Position',[.15 .15 .7 .7]);
    h.volumeax = axes(...
        'Parent',h.fig,...
        'Color','w',...
        'Units','normalized',...
        'OuterPosition',[0.2 0.55 .8 0.45]);
    h.zoom(1) = zoom(h.volumeax);
    hold on
    grid on
    box on
    ylabel('ErosionVolume [m]');
    h.plotax = axes(...
        'Parent',h.fig,...
        'Color','w',...
        'Units','normalized',...
        'OuterPosition',[0.2 0.05 .8 0.5]);
    h.zoom(2) = zoom(h.plotax);
    hold on
    grid on
    box on
    xlabel('Cross-shore Position [m]');
    ylabel('Height [m]');
    set(h.zoom,'ActionPostCallback',{@showVolumeIteration,'zoom'});
    h.slider = uicontrol(h.fig,...
        'Units','normalized',...
        'Value',100,...
        'Min',1,...
        'Max',100,...
        'SliderStep',[1 10]/100,...
        'Position',[0.05 0.01 0.9 0.03],...
        'Callback',{@showVolumeIteration,'movex0'},...
        'Style','slider');

    h.pan = uipanel(h.fig,...
        'Units','normalized',...
        'Position',[0 0.05 0.2 0.95]);
    h.text1 = uicontrol('parent',h.pan,...
        'Units','normalized',...
        'Style','text',...
        'Horizontalalignment','left',...
...        'BackGroundColor','none',...
        'Position',[0.1 0.7 0.8 0.05],...
        'String','x0 position:');
    
    h.x0invoer = uicontrol('parent',h.pan,...
        'Units','normalized',...
        'Style','edit',...
        'Horizontalalignment','left',...
        'BackGroundColor','w',...
        'Position',[0.1 0.6 0.8 0.05],...
        'Callback',{@showVolumeIteration,'movex0'});
    
    h.text2 = uicontrol('parent',h.pan,...
        'Units','normalized',...
        'Style','text',...
        'Horizontalalignment','left',...
...     'BackGroundColor','none',...
        'Position',[0.1 0.5 0.8 0.05],...
        'String','Resulting volume:');
    
    h.Volumetext = uicontrol('parent',h.pan,...
        'Units','normalized',...
        'Style','text',...
        'Horizontalalignment','left',...
...        'BackGroundColor','none',...
        'Position',[0.1 0.4 0.8 0.05]);
    %
    %% calculate boundaries etc.
    [xdum, zdum, h.xInitial, h.zInitial] = findCrossings(h.xInitial, h.zInitial, h.xInitial([1 end]), ones(2,1)*h.WL, 'keeporiginalgrid');
    FallvelocityArgs = [DuneErosionSettings('get', 'FallVelocity') {h.D50}];
    h.w = feval(FallvelocityArgs{:});
    FloatingProfile = getDUROSprofile(h.xInitial, [], 0, h.Hs, h.Tp, h.WL, h.w, [],false);

    h.xparab = FloatingProfile.xActive;
    h.zparab = FloatingProfile.z2Active;
    [h.x00min, h.x0min, h.x0max, h.x0except, h.xInitial, h.zInitial, h.SeawardBoundaryofInterest] = getIterationBoundaries(h.xInitial, h.zInitial, h.xparab, h.zparab, h.Hs, h.Tp, h.WL, h.w);

    %% plot initial profile and boundaries
    xinit = [min(h.xInitial); h.xInitial; max(h.xInitial); min(h.xInitial)];
    zinit = [min(h.zInitial); h.zInitial; min(h.zInitial); min(h.zInitial)];
    h.initpatch = patch(xinit,zinit,[255 222 111]/255,...
        'Edgecolor','none',...
        'Parent',h.plotax);
    h.initplot = plot(h.xInitial,h.zInitial,...
        'Parent',h.plotax,...
        'Color','k',...
        'LineStyle','-');

    h.limsx = xlim(h.plotax);
    h.limsy(1,1:2) = ylim(h.plotax);
    h.limsy(2,1:2) = [-20000 20000];

    if ~isempty(h.x0except)
        exc = reshape(h.x0except,numel(h.x0except),1);
        for iexc = 1:length(exc)
            h.excepts(iexc) = plot(ones(1,2)*exc(iexc),h.limsy(1,1:2),...
                'Parent',h.plotax,...
                'Color','b',...
                'LineStyle','--',...
                'LineWidth',2);
            h.excepts2((iexc)) = copyobj(h.excepts(iexc),h.volumeax);
            set(h.excepts2(iexc),'YData',h.limsy(2,:));
        end
        
    end

    h.WLplot = plot(h.limsx,ones(1,2)*h.WL,...
        'Parent',h.plotax,...
        'Color','b',...
        'LineStyle','--',...
        'LineWidth',2);

    h.bounds(1) = plot(ones(1,2)*h.x0min,h.limsy(1,1:2),...
        'Parent',h.plotax,...
        'Color','k',...
        'LineStyle','--',...
        'LineWidth',2);
    h.bounds(2) = plot(ones(1,2)*h.x0max,h.limsy(1,1:2),...
        'Parent',h.plotax,...
        'Color','k',...
        'LineStyle','--',...
        'LineWidth',2);
    h.bounds(3:4) = copyobj(h.bounds,h.volumeax);
    set(h.bounds(3:4),'YData',h.limsy(2,1:2));

    xlim(h.volumeax,h.limsx);
    
    %% calculate volumes
    h.x0(1) = h.x0min;
    h.result(1) = getDUROSprofile(h.xInitial, h.zInitial, h.x0(1), h.Hs, h.Tp, h.WL, h.w, h.SeawardBoundaryofInterest,false);
    h.Volume(1) = h.result(1).Volumes.Volume;
    h.x0(2) = h.x0max;
    h.axpos = get(h.plotax,'Position');
    h.figpos = get(h.fig,'Position');
    h.figx0 = h.axpos(1)*(h.figpos(3)) + ...
        (h.x0(2)-min(xlim(h.plotax)))/diff(xlim(h.plotax))*h.axpos(3)*h.figpos(3);
    h.result(2) = getDUROSprofile(h.xInitial, h.zInitial, h.x0(2), h.Hs, h.Tp, h.WL, h.w, h.SeawardBoundaryofInterest,false);
    h.Volume(2) = h.result(2).Volumes.Volume;
    %% plot volumes and parabolic profile
    h.volplot = plot(h.x0,h.Volume,...
        'Color','b',...
        'LineStyle','-',...
        'Marker','*',...
        'MarkerEdgeColor','k',...
        'LineWidth',2,...
        'Parent',h.volumeax);
    h.vol0line = plot(h.limsx,[0 0],...
        'Parent',h.volumeax,...
        'Color','r');
    h.limsy(2,:) = [min(h.Volume) max(h.Volume)];
    ylim(h.volumeax,h.limsy(2,:));

    h.parab = plot(h.result(2).xActive,h.result(2).z2Active,...
        'Color','r',...
        'LineStyle','-',...
        'LineWidth',2,...
        'ButtonDownFcn',{@showVolumeIteration,'btndown'});
    h.x0plot(1) = plot(ones(1,2)*h.x0(2),h.limsy(1,:),...
        'Parent',h.plotax,...
        'LineStyle','--',...
        'ButtonDownFcn',{@showVolumeIteration,'btndown'},...
        'Color','r');
    h.x0plot(2) = plot(ones(1,2)*h.x0(2),h.limsy(2,:),...
        'Parent',h.volumeax,...
        'LineStyle','--',...
        'ButtonDownFcn',{@showVolumeIteration,'btndown'},...
        'Color','r');
    
    set(0,'ShowHiddenHandles','on');
    tb = findobj('Type','uitoolbar','Parent',h.fig);
    tmp = get(tb,'Children');
    tts = get(tmp,'Tooltipstr');
    keeps = {'Zoom In','Zoom Out'};
    delete(tmp(~ismember(tts,keeps)));
    
    guidata(h.fig,h);
else
    if ~ishandle(varargin{1})
        return
    end
    h = guidata(varargin{1});
    switch varargin{end}
        case 'motion'
            if strcmp(h.zoom(1).Enable,'off')
                p = get(varargin{1},'CurrentPoint');
                xok = abs(h.figx0-p(1))<3;
                yok = p(2)>h.axpos(2)*h.figpos(3) &&...
                    p(2)<(h.axpos(4) + h.axpos(2))*h.figpos(3);
                if xok && yok
                    set(h.fig,'Pointer','custom');
                else
                    set(h.fig,'Pointer','arrow');
                end
            end
        case 'zoom'
            h.limsx = xlim(varargin{2}.Axes);
            set([h.plotax h.volumeax],'Xlim',h.limsx);
            set(h.volumeax,'Ylim',h.limsy(2,:));
            set(h.plotax,'Ylim',h.limsy(1,:));
        case 'btndown'
            set(h.fig,'WindowButtonMotionFcn',{@showVolumeIteration,'movex0'},...
                'WindowButtonUpFcn',{@showVolumeIteration,'btnup'});
        case 'movex0'
            h.zoom(1).Enable = 'off';
            % get position in graph
            if strcmp(get(varargin{1},'Type'),'uicontrol')
                if strcmp(get(varargin{1},'Style'),'slider')
                    pp = h.x0min + ((get(varargin{1},'value')-1)/100)*(h.x0max - h.x0min);
                else
                    pp = str2double(get(varargin{1},'String'));
                    if isempty(pp) || pp<h.x0min || pp > h.x0max
                        set(h.x0plot,'XData',ones(1,2)*h.x0(end));
                        return
                    end
                    relx0 = (pp-h.x0min)/(h.x0max-h.x0min);
                    set(h.slider,'Value',1+relx0*100);
                end
                docontinue = true;
            else
                point = get(h.plotax,'CurrentPoint');
                % move x0 and parab
                pp = point(1,1);
                if point(1,1)<h.x0min
                    pp = h.x0min;
                elseif point(1,1)>h.x0max
                    pp = h.x0max;
                end
                docontinue = false;
            end
            set(h.parab,'XData',h.xparab+pp,...
                'YData',h.zparab);
            set(h.x0plot,'XData',ones(1,2)*pp);
            if docontinue
                guidata(h.fig,h);
                showVolumeIteration(h.fig,'calc','btnup');
                h = guidata(h.fig);
            end
        case 'btnup'
            set(h.fig,'WindowButtonMotionFcn',{@showVolumeIteration,'motion'},...
                'WindowButtonUpFcn',[]);
            % calculate and plot / refresh
            
            if ischar(varargin{2})
                pp = h.x0min + ((get(h.slider,'value')-1)/100)*(h.x0max - h.x0min);
            else
                point = get(h.plotax,'CurrentPoint');
                % move x0 and parab
                pp = point(1,1);
                if point(1,1)<h.x0min
                    pp = h.x0min;
                elseif point(1,1)>h.x0max
                    pp = h.x0max;
                end
            end
            
            id = length(h.x0)+1;
            relx0 = (pp-h.x0min)/(h.x0max-h.x0min);
            set(h.slider,'Value',1+relx0*100);
            h.x0(id) = pp;
%             if ~isempty(h.x0except) && ...
%                     any(h.x0except(:,1) < pp & h.x0except(:,2) > pp)
%                 h.Volume(id) = nan;
%                 set(h.Volumetext,...
%                     'String','nan');
%                 set(h.x0invoer,'String',num2str(h.x0max));
%             else
                h.result(id) = getDUROSprofile(h.xInitial, h.zInitial, h.x0(id), h.Hs, h.Tp, h.WL, h.w, h.SeawardBoundaryofInterest,false);
                h.Volume(id) = h.result(id).Volumes.Volume;
                set(h.parab,'XData',h.result(id).xActive,...
                    'YData',h.result(id).z2Active);
                set(h.Volumetext,...
                    'String',num2str(h.Volume(id)));
                set(h.x0invoer,'String',num2str(h.x0(id)));
%             end
            h.axpos = get(h.plotax,'Position');
            h.figpos = get(h.fig,'Position');
            h.figx0 = h.axpos(1)*(h.figpos(3)) + ...
                (h.x0(id)-min(xlim(h.plotax)))/diff(xlim(h.plotax))*h.axpos(3)*h.figpos(3);
            [h.x0 sid] = sort(h.x0);
            h.Volume = h.Volume(sid);
            set(h.volplot,'XData',h.x0,...
                'YData',h.Volume);
    end
    guidata(h.fig,h);
end